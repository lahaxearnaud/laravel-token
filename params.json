{"name":"Laravel-token","tagline":"","body":"Laravel token\r\n=============\r\n\r\n[![Build Status](https://travis-ci.org/lahaxearnaud/laravel-token.svg?branch=develop)](https://travis-ci.org/lahaxearnaud/laravel-token)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/2f9abd1c-42a6-4a80-88f4-e1687b1d361a/mini.png)](https://insight.sensiolabs.com/projects/2f9abd1c-42a6-4a80-88f4-e1687b1d361a)\r\n[![CodeClimat](https://d3s6mut3hikguw.cloudfront.net/github/lahaxearnaud/laravel-token/badges/gpa.svg)](https://codeclimate.com/github/lahaxearnaud/laravel-token)\r\n[![Test Coverage](https://codeclimate.com/github/lahaxearnaud/laravel-token/badges/coverage.svg)](https://codeclimate.com/github/lahaxearnaud/laravel-token)\r\n[![License](https://poser.pugx.org/leaphly/cart-bundle/license.svg)](https://github.com/lahaxearnaud/laravel-token)\r\n\r\n\r\n## Table of Contents\r\n\r\n+ [Installation](#installation)\r\n    + [Database](#database)\r\n    + [Provider](#provider)\r\n    + [Facade](#facade)\r\n+ [Usage](#usage)\r\n    + [Create token](#create-token)\r\n    + [Crypt token](#crypt-token)\r\n    + [Validate token](#validate-token)\r\n    + [Route filter](#route-filter)\r\n    + [Exceptions](#exceptions)\r\n    + [Events](#events)\r\n+ [Commands](#commands)\r\n    + [Delete expired tokens](#delete-expired-tokens)\r\n    + [Truncate the table](#truncate-the-table)\r\n+ [API](#api)\r\n    + [Security](#security)\r\n    + [Creation](#creation)\r\n    + [Deletion](#deletion)\r\n    + [Validation](#validation)\r\n    + [Find](#find)\r\n\r\n## Installation\r\n\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"lahaxearnaud/laravel-token\": \"~0.5\"\r\n    }\r\n}\r\n```\r\n\r\n### Database\r\n\r\n```bash\r\n    $ php artisan migrate --package=\"lahaxearnaud/laravel-token\"\r\n```\r\n\r\n### Provider\r\n\r\n```php\r\n\t'providers' => array(\r\n        // ...\r\n\t\t'Lahaxearnaud\\LaravelToken\\LaravelTokenServiceProvider',\r\n\t),\r\n```\r\n\r\n### Facade\r\n\r\n```php\r\n\t'aliases' => array(\r\n        // ...\r\n\t\t'Token' => 'Lahaxearnaud\\LaravelToken\\LaravelTokenFacade',\r\n\t),\r\n```\r\n\r\n## Usage\r\n\r\n### Create token\r\n\r\n```php\r\n    $token = Token::create($userID, $allowLogin);\r\n```\r\n\r\nIf ``$allowLogin`` is set to true the token can be use to authentification via route filter.\r\n\r\n\r\n### Crypt token\r\n\r\n```php\r\n    $token = Token::create($userID, $allowLogin);\r\n    $cryptToken = Token::cryptToken($token->token);\r\n```\r\n\r\nIf ``$allowLogin`` is set to true the token can be use to authentification via route filter.\r\n\r\n\r\n### Validate token\r\n\r\nIf you crypt your token\r\n\r\n```php\r\n    $tokenStr = Token::getTokenValueFromRequest();\r\n\r\n    $cryptToken = Token::isValidCryptToken($token->token, $userId);\r\n```\r\n\r\nIf you don't crypt your token:\r\n\r\n```php\r\n    $tokenStr = Token::getTokenValueFromRequest();\r\n\r\n    $cryptToken = Token::isValidToken($token->token, $userId);\r\n```\r\n\r\nIf you use those functions the token is not burn. It can be use many times.\r\n\r\nFor one shot usage token:\r\n\r\n```php\r\n    $tokenStr = Token::getTokenValueFromRequest();\r\n\r\n    /**\r\n      * if the token is crypt do :\r\n      * $tokenStr = Token::uncryptToken($tokenStr);\r\n    **/\r\n\r\n    $tokenValid = true;\r\n    try {\r\n        // find the token\r\n        $token = $token->findByToken($tokenStr, $userId);\r\n\r\n        // test the token validity\r\n        if (Token::isValidToken($token)) {\r\n\r\n            // do what you need to do\r\n\r\n            // delete the token\r\n            Token::burn($token);\r\n        } else {\r\n            $tokenValid = false;\r\n        }\r\n    } catch (TokenNotFoundException $e) {\r\n        $tokenValid = false;\r\n    }\r\n\r\n    if($tokenValid) {\r\n        // manage errors\r\n    }\r\n```\r\n\r\n### Route filter\r\n\r\nSimple token protection:\r\n\r\n```php\r\n    Route::get('/token-protected', array('before' => 'token', function () {\r\n        echo \"I am token protected\";\r\n    }));\r\n```\r\n\r\nAuthentification by token:\r\n\r\nThe token used for an authentification must be a login token, pleaserefer to the token creation section\r\n\r\n```php\r\n    Route::get('/login-by-token', array('before' => 'token.auth', function () {\r\n        echo Auth::user()->username;\r\n    }));\r\n```\r\n\r\nIn order to use the authentification by token your class User need to implements ``Lahaxearnaud\\LaravelToken\\Models\\UserTokenInterface``\r\n\r\n```php\r\n\r\nuse Illuminate\\Auth\\UserTrait;\r\nuse Illuminate\\Auth\\UserInterface;\r\nuse Illuminate\\Auth\\Reminders\\RemindableTrait;\r\nuse Illuminate\\Auth\\Reminders\\RemindableInterface;\r\nuse Lahaxearnaud\\LaravelToken\\Models\\UserTokenInterface;\r\n\r\nclass User extends Eloquent implements UserInterface, RemindableInterface, UserTokenInterface {\r\n\r\n\tuse UserTrait, RemindableTrait;\r\n\r\n\t/**\r\n\t * The database table used by the model.\r\n\t *\r\n\t * @var string\r\n\t */\r\n\tprotected $table = 'users';\r\n\r\n\t/**\r\n\t * The attributes excluded from the model's JSON form.\r\n\t *\r\n\t * @var array\r\n\t */\r\n\tprotected $hidden = array('password', 'remember_token');\r\n\r\n    public function loggableByToken()\r\n    {\r\n        return true;\r\n    }\r\n}\r\n```\r\nThe method ``loggableByToken`` is called when a user try to authentificate with a token.\r\n\r\n\r\nIf an error occur on token validation a TokenExeption is throw, please go to [Exceptions](#exceptions) section. \r\n\r\n\r\nBy default you can send your token in parameter or header. The default name of the field is ``token`` but you \r\ncan change it by publishing and change the configuration:\r\n\r\n```bash\r\n    $ php artisan config:publish lahaxearnaud/laravel-token\r\n```\r\n\r\nThen change the tokenFieldName ``config/packages/lahaxearnaud/laravel-token/config.php``.\r\n\r\nYou can get the token instance via:\r\n```php\r\n    Token::getCurrentToken();\r\n```\r\n\r\n### Exceptions\r\n\r\nIf you use route filter you need to handle some Exceptions. Add the following error handler in you ``filter.php`` to catch them.\r\nThis is basic example, change the behavior to fit your needs (redirect, log...).\r\n\r\n```php\r\n    App::error(function(\\Lahaxearnaud\\LaravelToken\\exeptions\\TokenException $exception)\r\n    {\r\n        if($exception instanceof \\Lahaxearnaud\\LaravelToken\\exeptions\\TokenNotFoundException) {\r\n            return \\Response::make('Unauthorized (Not found)', 401);\r\n        }\r\n\r\n        if($exception instanceof \\Lahaxearnaud\\LaravelToken\\exeptions\\TokenNotValidException) {\r\n            return \\Response::make('Unauthorized (Not valid token)', 401);\r\n        }\r\n\r\n        if($exception instanceof \\Lahaxearnaud\\LaravelToken\\exeptions\\UserNotLoggableByTokenException) {\r\n            return \\Response::make('Unauthorized (Not loggable by token)', 401);\r\n        }\r\n\r\n        if($exception instanceof \\Lahaxearnaud\\LaravelToken\\exeptions\\NotLoginTokenException) {\r\n            return \\Response::make('Unauthorized (Not login token)', 401);\r\n        }\r\n    });\r\n```\r\n\r\n### Events\r\n\r\nYou can listen events:\r\n\r\n- Token not found\r\n    - name: ``token.notFound`` \r\n    - parameters:\r\n        - the token string\r\n- Token not valid\r\n    - name: ``token.notValid``\r\n    - parameters:\r\n        - the token object\r\n- Token doesn't allow to be used for login\r\n    - name: ``token.notLoginToken``\r\n    - parameters:\r\n        - the token object\r\n- The user can't logged with a token\r\n    - name: ``token.notLoggableUser``\r\n    - parameters:\r\n        - the token object\r\n        - the user object\r\n- Token burn\r\n    - name: ``token.burned``\r\n    - parameters:\r\n        - the token object\r\n- Token created\r\n    - name: ``token.created``\r\n    - parameters:\r\n        - the token object\r\n- Token saved\r\n    - name: ``token.saved``\r\n    - parameters:\r\n        - the token object\r\n\r\n## Commands\r\n    A new artisan command is added to your project in order to help you to clean your token table\r\n    \r\n    ### Delete expired tokens\r\n        Without any option the command delete all expired tokens.\r\n        ```bash\r\n            $ php artisan token:clean\r\n        ```\r\n    ### Truncate the table\r\n        If you specified ``--all`` all token will be deleted\r\n        ```bash\r\n            $ php artisan token:clean -all\r\n        ```\r\n## API\r\n\r\n### Security\r\n\r\nCrypt a string token in order to get a public token\r\n\r\n```php\r\n    Token::cryptToken ($uncrypt)\r\n```\r\n\r\nUncrypt a public token in order to get the private token\r\n\r\n```php\r\n    Token::uncryptToken ($crypt)\r\n```\r\n\r\n### Creation\r\n\r\nCreate a Token instance (directly saved in database)\r\n\r\n```php\r\n    Token::create ($userId, $allowLogin = false, $lifetime = 3600, $length = 100)\r\n```\r\n\r\nIf ``$allowLogin`` is set to true the token can be use to authentification via route filter.\r\n\r\n### Deletion\r\n\r\nDelete the token\r\n\r\n```php\r\n    Token::burn (Token $token)\r\n```\r\n\r\n### Validation\r\n\r\nFetch the token, check id the token has the good user ID and if it is not expired\r\n\r\n```php\r\n    Token::isValidToken ($token, $userId)\r\n```\r\n\r\nSame as isValidToken but uncrypt the token before trying to find him\r\n\r\n```php\r\n    Token::isValidCryptToken ($token, $userId)\r\n```\r\n\r\nOnly validate if the token is expired\r\n\r\n```php\r\n    Token::isValid (Token $token)\r\n```\r\n\r\n### Find\r\n\r\nFind the token by ID\r\n\r\n```php\r\n    Token::find ($id)\r\n```\r\n\r\nFind the token by token string\r\n\r\n```php\r\n    Token::findByToken ($token, $userId)\r\n```\r\n\r\nFind all token for an user\r\n\r\n```php\r\n    Token::findByUser ($idUser)\r\n```\r\n\r\n## Todo\r\n- token type\r\n- config to allow only one token by user and type\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}