{"name":"Laravel-token","tagline":"","body":"Laravel token\r\n=============\r\n\r\n[![Build Status](https://travis-ci.org/lahaxearnaud/laravel-token.svg?branch=develop)](https://travis-ci.org/lahaxearnaud/laravel-token)\r\n[![SensioLabsInsight](https://insight.sensiolabs.com/projects/2f9abd1c-42a6-4a80-88f4-e1687b1d361a/mini.png)](https://insight.sensiolabs.com/projects/2f9abd1c-42a6-4a80-88f4-e1687b1d361a)\r\n[![CodeClimat](https://d3s6mut3hikguw.cloudfront.net/github/lahaxearnaud/laravel-token/badges/gpa.svg)](https://codeclimate.com/github/lahaxearnaud/laravel-token)\r\n[![Test Coverage](https://codeclimate.com/github/lahaxearnaud/laravel-token/badges/coverage.svg)](https://codeclimate.com/github/lahaxearnaud/laravel-token)\r\n[![License](https://poser.pugx.org/leaphly/cart-bundle/license.svg)](https://github.com/lahaxearnaud/cook-bookmarks)\r\n\r\n\r\n## Table of Contents\r\n\r\n+ [Installation](#installation)\r\n    + [Database](#database)\r\n    + [Provider](#provider)\r\n    + [Facase](#facase)\r\n+ [Usage](#usage)\r\n    + [Create token](#create-token)\r\n    + [Crypt token](#crypt-token)\r\n    + [Validate token](#validate-token)\r\n+ [API](#api)\r\n    + [Security](#security)\r\n    + [Creation](#creation)\r\n    + [Deletion](#deletion)\r\n    + [Validation](#validation)\r\n    + [Find](#find)\r\n\r\n## Installation\r\n\r\n\r\n```\r\n{\r\n    \"require\": {\r\n        \"lahaxearnaud/laravel-token\": \"~0.1\"\r\n    }\r\n}\r\n```\r\n\r\n### Database\r\n\r\n### Provider\r\n\r\n```\r\n\t'providers' => array(\r\n        // ...\r\n\t\t'Lahaxearnaud\\LaravelToken\\LaravelTokenServiceProvider',\r\n\t),\r\n```\r\n\r\n### Facase\r\n\r\n```\r\n\t'aliases' => array(\r\n        // ...\r\n\t\t'Token' => 'Lahaxearnaud\\LaravelToken\\LaravelTokenFacade',\r\n\t),\r\n```\r\n\r\n## Usage\r\n\r\n### Create token\r\n\r\n```\r\n    $token = Token::create($userID);\r\n```\r\n\r\n### Crypt token\r\n\r\n```\r\n    $token = Token::create($userID);\r\n    $cryptToken = Token::cryptToken($token->token);\r\n```\r\n\r\n### Validate token\r\n\r\nIf you crypt your token\r\n\r\n```\r\n    $tokenStr = Input::get('token');\r\n\r\n    $cryptToken = Token::isValidCryptToken($token->token, $userId);\r\n```\r\n\r\nIf you don't crypt your token:\r\n\r\n```\r\n    $tokenStr = Input::get('token');\r\n\r\n    $cryptToken = Token::isValidToken($token->token, $userId);\r\n```\r\n\r\nIf you use those functions the token is not burn. It can be use many times.\r\n\r\nFor one shot usage token:\r\n\r\n```\r\n    $tokenStr = Input::get('token');\r\n\r\n    /**\r\n      * if the token is crypt do :\r\n      * $tokenStr = Token::uncryptToken($tokenStr);\r\n    **/\r\n\r\n    $tokenValid = true;\r\n    try {\r\n        // find the token\r\n        $token = $token->findByToken($tokenStr, $userId);\r\n\r\n        // test the token validity\r\n        if (Token::isValidToken($token)) {\r\n\r\n            // do what you need to do\r\n\r\n            // delete the token\r\n            Token::burn($token);\r\n        } else {\r\n            $tokenValid = false;\r\n        }\r\n    } catch (ModelNotFoundException $e) {\r\n        $tokenValid = false;\r\n    }\r\n\r\n    if($tokenValid) {\r\n        // manage errors\r\n    }\r\n```\r\n\r\n## API\r\n\r\n### Security\r\n\r\nCrypt a string token\r\n\r\n```\r\n    public function cryptToken ($uncrypt)\r\n```\r\n\r\nUncrypt a string token\r\n\r\n```\r\n    public function uncryptToken ($crypt)\r\n```\r\n\r\n### Creation\r\n\r\nCreate a Token instance\r\n\r\n```\r\n    public function create ($userId, $lifetime = 3600, $length = 100)\r\n```\r\n\r\nInsert the token in database\r\n\r\n```\r\n    public function persist (Token $token)\r\n```\r\n\r\n### Deletion\r\n\r\nDelete the token\r\n\r\n```\r\n    public function burn (Token $token)\r\n```\r\n\r\n### Validation\r\n\r\nFetch the token, check id the token has the good user ID and if it is not expired\r\n\r\n```\r\n    public function isValidToken ($token, $userId)\r\n```\r\n\r\nSame as isValidToken but uncrypt the token before trying to find him\r\n\r\n```\r\n    public function isValidCryptToken ($token, $userId)\r\n```\r\n\r\nOnly validate if the token is expired\r\n\r\n```\r\n    public function isValid (Token $token)\r\n```\r\n\r\n### Find\r\n\r\nFind the token by ID\r\n\r\n```\r\n    public function find ($id)\r\n```\r\n\r\nFind the token by token string\r\n\r\n```\r\n    public function findByToken ($token, $userId)\r\n```\r\n\r\nFind all token for an user\r\n\r\n```\r\n    public function findByUser ($idUser)\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}